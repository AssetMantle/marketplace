# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# An example controller showing a sample home page
# GET        /                                           controllers.HomeController.index()

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                      controllers.Assets.versioned(path="/public", file: Asset)
GET         /versionedAssets/*file                             controllers.PublicResourceController.versioned(path="/public", file: Asset, version: String)
GET         /javascriptRoutes                                  controllers.JavaScriptRoutesController.javascriptRoutes
GET         /firebase-messaging-sw.js                          controllers.Assets.at(path="/public/javascripts/firebase", file="firebase-messaging-sw.js")

# Index
GET         /                                                  controllers.IndexController.index()
GET         /sitemap.xml                                       controllers.IndexController.sitemap()

GET         /signUp                                            controllers.AccountController.signUpForm()
POST        /signUp                                            controllers.AccountController.signUp()

GET         /checkUsernameAvailable                            controllers.AccountController.checkUsernameAvailable(username: String)

GET         /verifyWalletMnemonicso                            controllers.AccountController.verifyWalletMnemonicsForm()
POST        /verifyWalletMnemonics                             controllers.AccountController.verifyWalletMnemonics()

GET         /signInWithCallback                                controllers.AccountController.signInWithCallbackForm(callbackUrl: String ?= "/")
POST        /signInWithCallback                                controllers.AccountController.signInWithCallback()

GET         /signOut                                           controllers.AccountController.signOutForm()
POST        /signOut                                           controllers.AccountController.signOut()

GET         /forgetPassword                                    controllers.AccountController.forgetPasswordForm()
POST        /forgetPassword                                    controllers.AccountController.forgetPassword()

GET         /changePassword                                    controllers.AccountController.changePasswordForm()
POST        /changePassword                                    controllers.AccountController.changePassword()

GET         /migrateWalletToKey                                controllers.AccountController.migrateWalletToKeyForm()
POST        /migrateWalletToKey                                controllers.AccountController.migrateWalletToKey()

POST        /changeActiveKey                                   controllers.AccountController.changeActiveKey()

GET         /walletPopup                                       controllers.WalletController.walletPopup()
GET         /wrappedTokenBalance                               controllers.WalletController.wrappedTokenBalance()
GET         /walletPopupKeys                                   controllers.WalletController.walletPopupKeys()

GET         /collections                                       controllers.CollectionController.viewCollections()
GET         /collection/:id                                    controllers.CollectionController.viewCollection(id: String)
GET         /collectionsSection                                controllers.CollectionController.collectionsSection()
GET         /collectionList                                    controllers.CollectionController.collectionList()
GET         /collectionsPerPage                                controllers.CollectionController.collectionsPerPage(pageNumber: Int)
GET         /collectionNFTs                                    controllers.CollectionController.collectionNFTs(id: String)
GET         /collectionNFTsPerPage                             controllers.CollectionController.collectionNFTsPerPage(id: String, pageNumber: Int)
GET         /collectionInfo                                    controllers.CollectionController.info(id: String)
GET         /collectionAnalysis                                controllers.CollectionController.topRightCard(id: String)
GET         /commonCardInfo                                    controllers.CollectionController.commonCardInfo(id: String, statusId: Int)
GET         /created                                           controllers.CollectionController.createdSection(accountId: String)
GET         /createdCollectionPerPage                          controllers.CollectionController.createdCollectionPerPage(accountId: String, pageNumber: Int)
GET         /countForCreatorNotForSell                         controllers.CollectionController.countForCreatorNotForSell(collectionId: String, accountId: String)
GET         /createCollection                                  controllers.CollectionController.createForm()
POST        /createCollection                                  controllers.CollectionController.create()
GET         /editCollection                                    controllers.CollectionController.editForm(id: String)
POST        /editCollection                                    controllers.CollectionController.edit()
GET         /defineProperties                                  controllers.CollectionController.definePropertiesForm(id: String)
POST        /defineProperties                                  controllers.CollectionController.defineProperties()
GET         /deleteCollectionDraft                             controllers.CollectionController.deleteDraftForm(collectionId: String)
POST        /deleteCollectionDraft                             controllers.CollectionController.deleteDraft()
GET         /genesisTypeForm                                   controllers.CollectionController.genesisTypeForm()

GET         /uploadCollectionDraftFilesForm                    controllers.CollectionController.uploadCollectionDraftFilesForm(id: String)
GET         /uploadCollectionDraftFileForm                     controllers.CollectionController.uploadCollectionDraftFileForm(id: String, documentType: String)
POST        /storeCollectionDraftFile                          controllers.CollectionController.storeCollectionDraftFile(id: String, documentType: String)
GET         /uploadCollectionDraftFile                         controllers.CollectionController.uploadCollectionDraftFile(id: String, documentType: String, name: String)

GET         /uploadCollectionFilesForm                         controllers.CollectionController.uploadCollectionFilesForm(id: String)
GET         /uploadCollectionFileForm                          controllers.CollectionController.uploadCollectionFileForm(id: String, documentType: String)
POST        /storeCollectionFile                               controllers.CollectionController.storeCollectionFile(id: String, documentType: String)
GET         /uploadCollectionFile                              controllers.CollectionController.uploadCollectionFile(id: String, documentType: String, name: String)

GET         /collectedSection                                  controllers.CollectedController.collectedSection(accountId: String)
GET         /collectedCollectionPerPage                        controllers.CollectedController.collectionPerPage(accountId: String, pageNumber: Int)
GET         /collectedCollectionNFTs                           controllers.CollectedController.collectionNFTs(accountId: String, collectionId: String)
GET         /profile/:accountId/COLLECTED/:collectionId        controllers.CollectedController.viewCollectionNFTs(accountId: String, collectionId: String)
GET         /collectedNFTsPerPage                              controllers.CollectedController.collectionNFTsPerPage(accountId: String, collectionId: String, pageNumber: Int)
GET         /collectedCardInfo                                 controllers.CollectedController.commonCardInfo(collectionID: String, accountID: String)
GET         /collectedCollectionTopRightCard                   controllers.CollectedController.topRightCard(collectionID: String, accountID: String)

GET         /wishlistSection                                   controllers.WishlistController.wishlistSection(accountId: String)
GET         /wishListCollectionPerPage                         controllers.WishlistController.collectionPerPage(accountId: String, pageNumber: Int)
GET         /wishListCollectionNFTs                            controllers.WishlistController.collectionNFTs(accountId: String, collectionId: String)
GET         /profile/:accountId/WISHLIST/:collectionId         controllers.WishlistController.viewCollectionNFTs(accountId: String, collectionId: String)
GET         /wishListNFTsPerPage                               controllers.WishlistController.collectionNFTsPerPage(accountId: String, collectionId: String, pageNumber: Int)

POST        /addToWishList                                     controllers.WishlistController.add()
POST        /deleteFromWishList                                controllers.WishlistController.delete()

GET         /nft/:id                                           controllers.NFTController.viewNFT(id: String)
GET         /nftDetails                                        controllers.NFTController.details(nftId: String)
GET         /nftDetailViewLeftCards                            controllers.NFTController.detailViewLeftCards(nftId: String)
GET         /nftInfo                                           controllers.NFTController.info(nftId: String)
GET         /nftDetailViewRightCards                           controllers.NFTController.detailViewRightCards(nftId: String)
GET         /nftCollectionInfo                                 controllers.NFTController.collectionInfo(nftId: String)
GET         /likesCounter                                      controllers.NFTController.likesCounter(nftId: String)
GET         /nftPrice                                          controllers.NFTController.price(nftId: String)

# Create NFT
GET         /selectCollection                                  controllers.NFTController.selectCollection()
GET         /uploadNFTFileForm                                 controllers.NFTController.uploadNFTFileForm(collectionId: String)
POST        /storeNFTFile                                      controllers.NFTController.storeNFTFile(collectionId: String, documentType: String)
GET         /uploadNFTFile                                     controllers.NFTController.uploadNFTFile(collectionId: String, documentType: String, name: String)
GET         /basicDetails                                      controllers.NFTController.basicDetailsForm(collectionId: String, nftId: String)
POST        /basicDetails                                      controllers.NFTController.basicDetails()
GET         /nftTags                                           controllers.NFTController.tagsForm(collectionId: String, nftId: String)
POST        /nftTags                                           controllers.NFTController.tags()
GET         /setProperties                                     controllers.NFTController.setPropertiesForm(collectionId: String, nftId: String)
POST        /setProperties                                     controllers.NFTController.setProperties()
GET         /deleteNftDraft                                    controllers.NFTController.deleteDraftForm(nftId: String, fileHash: String)
POST        /deleteNftDraft                                    controllers.NFTController.deleteDraft()

GET         /settings                                          controllers.SettingController.viewSettings()
GET         /profileSettings                                   controllers.SettingController.settings()
GET         /addNewKey                                         controllers.SettingController.addNewKey()
GET         /addManagedKey                                     controllers.SettingController.addManagedKeyForm()
POST        /addManagedKey                                     controllers.SettingController.addManagedKey()
GET         /addUnmanagedKey                                   controllers.SettingController.addUnmanagedKeyForm()
POST        /addUnmanagedKey                                   controllers.SettingController.addUnmanagedKey()
GET         /changeKeyName                                     controllers.SettingController.changeKeyNameForm(address: String)
POST        /changeKeyName                                     controllers.SettingController.changeKeyName()
GET         /viewMnemonics                                     controllers.SettingController.viewMnemonicsForm(address: String)
POST        /viewMnemonics                                     controllers.SettingController.viewMnemonics()
GET         /deleteKey                                         controllers.SettingController.deleteKeyForm(address: String)
POST        /deleteKey                                         controllers.SettingController.deleteKey()
GET         /walletBalance                                     controllers.SettingController.walletBalance(address: String)
GET         /provisionAddress                                  controllers.SettingController.provisionAddressForm(address: String)
POST        /provisionAddress                                  controllers.SettingController.provisionAddress()

GET         /defaultProfile                                    controllers.ProfileController.viewDefaultProfile()
GET         /profile/:accountId/:activeTab                     controllers.ProfileController.viewProfile(accountId: String, activeTab: String)
GET         /profile/:accountId                                controllers.ProfileController.viewProfile(accountId: String, activeTab: String ?= "COLLECTED")
GET         /profileSection                                    controllers.ProfileController.profile(accountId: String, activeTab: String)
GET         /notificationPopup                                 controllers.ProfileController.notificationPopup()
GET         /loadMoreNotifications                             controllers.ProfileController.loadMoreNotifications(pageNumber: Int)
GET         /countUnreadNotification                           controllers.ProfileController.countUnreadNotification()
POST        /markNotificationsRead                             controllers.ProfileController.markNotificationsRead()
GET         /profileInfoCard                                   controllers.ProfileController.profileInfoCard(accountId: String)
GET         /profileActivityCard                               controllers.ProfileController.profileActivityCard(accountId: String)
GET         /profileAnalysisCard                               controllers.ProfileController.profileAnalysisCard(accountId: String)

GET         /whitelistSection                                  controllers.WhitelistController.whitelistSection()
GET         /createdWhitelists                                 controllers.WhitelistController.createdWhitelists()
GET         /createdWhitelistsPerPage                          controllers.WhitelistController.createdWhitelistsPerPage(pageNumber: Int)
GET         /joinedWhitelists                                  controllers.WhitelistController.joinedWhitelists()
GET         /joinedWhitelistsPerPage                           controllers.WhitelistController.joinedWhitelistsPerPage(pageNumber: Int)
GET         /whitelistTotalMembers                             controllers.WhitelistController.whitelistTotalMembers(id: String)

GET         /createWhitelist                                   controllers.WhitelistController.createWhitelistForm()
POST        /createWhitelist                                   controllers.WhitelistController.createWhitelist()

GET         /editWhitelist                                     controllers.WhitelistController.editWhitelistForm(whitelistId: String)
POST        /editWhitelist                                     controllers.WhitelistController.editWhitelist()

GET         /earlyAccess                                       controllers.PublicListingController.viewCollections()
GET         /publicListedCollectionsSection                    controllers.PublicListingController.collectionsSection()
GET         /publicListedCollectionsPerPage                    controllers.PublicListingController.collectionsPerPage(pageNumber: Int)
GET         /earlyAccess/:id                                   controllers.PublicListingController.viewCollection(id: String)
GET         /earlyAccessCollectionNFTs                         controllers.PublicListingController.collectionNFTs(id: String)
GET         /earlyAccessCollectionTopRightCard                 controllers.PublicListingController.collectionTopRightCard(id: String)
GET         /createPublicListing                               controllers.PublicListingController.createPublicListingForm(collectionId: Option[String])
POST        /createPublicListing                               controllers.PublicListingController.createPublicListing()
GET         /editPublicListing                                 controllers.PublicListingController.editForm(publicListingId: String)
POST        /editPublicListing                                 controllers.PublicListingController.edit()

GET         /buyPublicListingNFT                               controllers.PublicListingController.buyNFTForm(publicListingId: String)
POST        /buyPublicListingNFT                               controllers.PublicListingController.buyNFT()

GET         /launchpad                                         controllers.SaleController.viewCollections()
GET         /launchpadCollectionsSection                       controllers.SaleController.collectionsSection()
GET         /launchpadCollectionsPerPage                       controllers.SaleController.collectionsPerPage(pageNumber: Int)
GET         /launchpad/:id                                     controllers.SaleController.viewCollection(id: String)
GET         /launchpadCollectionNFTs                           controllers.SaleController.collectionNFTs(id: String)
GET         /launchpadCollectionTopRightCard                   controllers.SaleController.collectionTopRightCard(id: String)
GET         /createSale                                        controllers.SaleController.createCollectionSaleForm(whitelistId: Option[String], collectionId: Option[String])
POST        /createSale                                        controllers.SaleController.createCollectionSale()
GET         /buySaleNFT                                        controllers.SaleController.buySaleNFTForm(saleId: String)
POST        /buySaleNFT                                        controllers.SaleController.buySaleNFT()

GET         /market                                            controllers.SecondaryMarketController.viewCollections()
GET         /secondaryMarketCollectionsSection                 controllers.SecondaryMarketController.collectionsSection()
GET         /secondaryMarketCollectionsPerPage                 controllers.SecondaryMarketController.collectionsPerPage(pageNumber:Int)
GET         /market/:id                                        controllers.SecondaryMarketController.viewCollection(id: String)
GET         /marketCollectionNFTs                              controllers.SecondaryMarketController.collectionNFTs(id: String)
GET         /marketCollectionNFTsPerPage                       controllers.SecondaryMarketController.collectionNFTsPerPage(id: String, pageNumber: Int)
GET         /marketCollectionRightCards                        controllers.SecondaryMarketController.collectionTopRightCard(id: String)
GET         /createSecondaryMarket                             controllers.SecondaryMarketController.createForm(nftId: String)
POST        /createSecondaryMarket                             controllers.SecondaryMarketController.create()
GET         /cancelSecondaryMarket                             controllers.SecondaryMarketController.cancelForm(nftId: String, secondaryMarketId: String)
POST        /cancelSecondaryMarket                             controllers.SecondaryMarketController.cancel()
GET         /buySecondaryMarket                                controllers.SecondaryMarketController.buyForm(secondaryMarketId: String)
POST        /buySecondaryMarket                                controllers.SecondaryMarketController.buy()

GET         /unwrapToken                                       controllers.WalletController.unwrapTokenForm()
POST        /unwrapToken                                       controllers.WalletController.unwrapToken()

# Should be not changed it will be public
GET         /acceptWhitelistInvite/:whitelistId                controllers.WhitelistController.viewAcceptInviteDetails(whitelistId: String)
GET         /whitelistInviteDetails                            controllers.WhitelistController.acceptInviteDetails(whitelistId: String)
POST        /acceptWhitelistInvite                             controllers.WhitelistController.acceptInvite()
GET         /leaveWhitelistDetails                             controllers.WhitelistController.leaveWhitelistDetails(whitelistId: String)
POST        /leaveWhitelist                                    controllers.WhitelistController.leaveWhitelist()
POST        /deleteMember                                      controllers.WhitelistController.deleteMember()
GET         /listMembers                                       controllers.WhitelistController.listMembers(whitelistId: String)
GET         /whitelistDetail                                   controllers.WhitelistController.detail(whitelistId: String)

#GET         /changeManagedToUnmanaged        controllers.ProfileController.changeManagedToUnmanagedForm(address: String)
#POST        /changeManagedToUnmanaged        controllers.ProfileController.changeManagedToUnmanaged()

GET         /gasTokenPrice                                     controllers.BlockchainTransactionController.gasTokenPrice()
GET         /addressBalance                                    controllers.BlockchainTransactionController.balance(address: String)
GET         /sendCoin                                          controllers.BlockchainTransactionController.sendCoinForm(fromAddress: String)
POST        /sendCoin                                          controllers.BlockchainTransactionController.sendCoin()

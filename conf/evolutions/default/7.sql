ALTER TABLE MASTER."Account"
    ADD COLUMN IF NOT EXISTS "createdOnMillisEpoch" BIGINT DEFAULT null;
ALTER TABLE MASTER."Account"
    ADD COLUMN IF NOT EXISTS "updatedOnMillisEpoch" BIGINT DEFAULT null;
DROP TRIGGER IF EXISTS ACCOUNT_LOG ON MASTER."Account";
UPDATE MASTER."Account"
SET "createdOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "createdOn" AT TIME ZONE "createdOnTimeZone") * 1000)
WHERE "createdOn" IS NOT NULL;
UPDATE MASTER."Account"
SET "updatedOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "updatedOn" AT TIME ZONE "updatedOnTimeZone") * 1000)
WHERE "updatedOn" IS NOT NULL;
ALTER TABLE MASTER."Account"
    DROP COLUMN IF EXISTS "createdOn";
ALTER TABLE MASTER."Account"
    DROP COLUMN IF EXISTS "createdOnTimeZone";
ALTER TABLE MASTER."Account"
    DROP COLUMN IF EXISTS "updatedOn";
ALTER TABLE MASTER."Account"
    DROP COLUMN IF EXISTS "updatedOnTimeZone";
CREATE TRIGGER ACCOUNT_LOG
    BEFORE INSERT OR UPDATE
    ON MASTER."Account"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_EPOCH_LOG();

ALTER TABLE MASTER."Key"
    ADD COLUMN IF NOT EXISTS "createdOnMillisEpoch" BIGINT DEFAULT null;
ALTER TABLE MASTER."Key"
    ADD COLUMN IF NOT EXISTS "updatedOnMillisEpoch" BIGINT DEFAULT null;
DROP TRIGGER IF EXISTS KEY_LOG ON MASTER."Key";
UPDATE MASTER."Key"
SET "createdOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "createdOn" AT TIME ZONE "createdOnTimeZone") * 1000)
WHERE "createdOn" IS NOT NULL;
UPDATE MASTER."Key"
SET "updatedOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "updatedOn" AT TIME ZONE "updatedOnTimeZone") * 1000)
WHERE "updatedOn" IS NOT NULL;
ALTER TABLE MASTER."Key"
    DROP COLUMN IF EXISTS "createdOn";
ALTER TABLE MASTER."Key"
    DROP COLUMN IF EXISTS "createdOnTimeZone";
ALTER TABLE MASTER."Key"
    DROP COLUMN IF EXISTS "updatedOn";
ALTER TABLE MASTER."Key"
    DROP COLUMN IF EXISTS "updatedOnTimeZone";
CREATE TRIGGER KEY_LOG
    BEFORE INSERT OR UPDATE
    ON MASTER."Key"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_EPOCH_LOG();

ALTER TABLE MASTER."Wallet"
    ADD COLUMN IF NOT EXISTS "createdOnMillisEpoch" BIGINT DEFAULT null;
ALTER TABLE MASTER."Wallet"
    ADD COLUMN IF NOT EXISTS "updatedOnMillisEpoch" BIGINT DEFAULT null;
DROP TRIGGER IF EXISTS WALLET_LOG ON MASTER."Wallet";
UPDATE MASTER."Wallet"
SET "createdOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "createdOn" AT TIME ZONE "createdOnTimeZone") * 1000)
WHERE "createdOn" IS NOT NULL;
UPDATE MASTER."Wallet"
SET "updatedOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "updatedOn" AT TIME ZONE "updatedOnTimeZone") * 1000)
WHERE "updatedOn" IS NOT NULL;
ALTER TABLE MASTER."Wallet"
    DROP COLUMN IF EXISTS "createdOn";
ALTER TABLE MASTER."Wallet"
    DROP COLUMN IF EXISTS "createdOnTimeZone";
ALTER TABLE MASTER."Wallet"
    DROP COLUMN IF EXISTS "updatedOn";
ALTER TABLE MASTER."Wallet"
    DROP COLUMN IF EXISTS "updatedOnTimeZone";
CREATE TRIGGER WALLET_LOG
    BEFORE INSERT OR UPDATE
    ON MASTER."Wallet"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_EPOCH_LOG();

ALTER TABLE MASTER."WishList"
    ADD COLUMN IF NOT EXISTS "createdOnMillisEpoch" BIGINT DEFAULT null;
ALTER TABLE MASTER."WishList"
    ADD COLUMN IF NOT EXISTS "updatedOnMillisEpoch" BIGINT DEFAULT null;
DROP TRIGGER IF EXISTS WISHLIST_LOG ON MASTER."WishList";
UPDATE MASTER."WishList"
SET "createdOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "createdOn" AT TIME ZONE "createdOnTimeZone") * 1000)
WHERE "createdOn" IS NOT NULL;
UPDATE MASTER."WishList"
SET "updatedOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "updatedOn" AT TIME ZONE "updatedOnTimeZone") * 1000)
WHERE "updatedOn" IS NOT NULL;
ALTER TABLE MASTER."WishList"
    DROP COLUMN IF EXISTS "createdOn";
ALTER TABLE MASTER."WishList"
    DROP COLUMN IF EXISTS "createdOnTimeZone";
ALTER TABLE MASTER."WishList"
    DROP COLUMN IF EXISTS "updatedOn";
ALTER TABLE MASTER."WishList"
    DROP COLUMN IF EXISTS "updatedOnTimeZone";
CREATE TRIGGER WISHLIST_LOG
    BEFORE INSERT OR UPDATE
    ON MASTER."WishList"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_EPOCH_LOG();

ALTER TABLE MASTER."WhitelistMember"
    ADD COLUMN IF NOT EXISTS "createdOnMillisEpoch" BIGINT DEFAULT null;
ALTER TABLE MASTER."WhitelistMember"
    ADD COLUMN IF NOT EXISTS "updatedOnMillisEpoch" BIGINT DEFAULT null;
DROP TRIGGER IF EXISTS WHITE_LIST_MEMBER_LOG ON MASTER."WhitelistMember";
UPDATE MASTER."WhitelistMember"
SET "createdOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "createdOn" AT TIME ZONE "createdOnTimeZone") * 1000)
WHERE "createdOn" IS NOT NULL;
UPDATE MASTER."WhitelistMember"
SET "updatedOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "updatedOn" AT TIME ZONE "updatedOnTimeZone") * 1000)
WHERE "updatedOn" IS NOT NULL;
ALTER TABLE MASTER."WhitelistMember"
    DROP COLUMN IF EXISTS "createdOn";
ALTER TABLE MASTER."WhitelistMember"
    DROP COLUMN IF EXISTS "createdOnTimeZone";
ALTER TABLE MASTER."WhitelistMember"
    DROP COLUMN IF EXISTS "updatedOn";
ALTER TABLE MASTER."WhitelistMember"
    DROP COLUMN IF EXISTS "updatedOnTimeZone";
CREATE TRIGGER WHITE_LIST_MEMBER_LOG
    BEFORE INSERT OR UPDATE
    ON MASTER."WhitelistMember"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_EPOCH_LOG();

ALTER TABLE MASTER."Whitelist"
    ADD COLUMN IF NOT EXISTS "createdOnMillisEpoch" BIGINT DEFAULT null;
ALTER TABLE MASTER."Whitelist"
    ADD COLUMN IF NOT EXISTS "updatedOnMillisEpoch" BIGINT DEFAULT null;
DROP TRIGGER IF EXISTS WHITE_LIST_LOG ON MASTER."Whitelist";
UPDATE MASTER."Whitelist"
SET "createdOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "createdOn" AT TIME ZONE "createdOnTimeZone") * 1000)
WHERE "createdOn" IS NOT NULL;
UPDATE MASTER."Whitelist"
SET "updatedOnMillisEpoch" = FLOOR(EXTRACT(EPOCH FROM "updatedOn" AT TIME ZONE "updatedOnTimeZone") * 1000)
WHERE "updatedOn" IS NOT NULL;
ALTER TABLE MASTER."Whitelist"
    DROP COLUMN IF EXISTS "createdOn";
ALTER TABLE MASTER."Whitelist"
    DROP COLUMN IF EXISTS "createdOnTimeZone";
ALTER TABLE MASTER."Whitelist"
    DROP COLUMN IF EXISTS "updatedOn";
ALTER TABLE MASTER."Whitelist"
    DROP COLUMN IF EXISTS "updatedOnTimeZone";
CREATE TRIGGER WHITE_LIST_LOG
    BEFORE INSERT OR UPDATE
    ON MASTER."Whitelist"
    FOR EACH ROW
EXECUTE PROCEDURE PUBLIC.INSERT_OR_UPDATE_EPOCH_LOG();

DROP TRIGGER IF EXISTS COLLECTION_FILE_LOG ON MASTER."CollectionFile";
DROP TABLE IF EXISTS MASTER."CollectionFile";
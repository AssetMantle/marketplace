# https://www.playframework.com/documentation/latest/Configuration

akka {
  actor {
    timeout = 1

    appWebSocketActorMailBox {
      mailbox-type = "actors.AppWebSocketActorMailBox"
    }

    default-mailbox {
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
    }

    default-dispatcher {
      fork-join-executor {

        parallelism-min = 12
        parallelism-factor = 5.0

        parallelism-max = 64
        task-peeking-mode = "FIFO"
      }
    }

    scheduler-dispatcher {
      executor = "thread-pool-executor"
      throughput = 1
      thread-pool-executor {
        fixed-pool-size = 29
      }
    }
  }

}

play.filters {
  headers {
    frameOptions = "sameorigin"
    xssProtection = "1; mode=block"
    contentTypeOptions = "nosniff"
    referrerPolicy = null
    contentSecurityPolicy = "default-src 'self' https://assetmantle-test-collection.s3.ap-south-1.amazonaws.com http://localhost:26657 http://localhost:1317 ws://localhost:9000 wss://*.assetmantle.one https://s3.amazonaws.com/keybase_processed_uploads/ https://demo.docusign.net/ resource://devtools/ https://fcm.googleapis.com/fcm/connect/subscribe *.assetmantle.one 'unsafe-inline' data: https://assetmantle-marketplace-collections.s3.ap-south-1.amazonaws.com/"
  }

  hosts {
    allowed = ["."]
  }
}

play.filter {
  enabled += play.filters.csrf.CSRFFilter
  enabled += play.filters.headers.SecurityHeadersFilter
  enabled += play.filters.hosts.AllowedHostsFilter
  enabled += play.filters.cors.CORSFilter
  enabled += play.filters.csp.CSPFilter
}

play.http {
    secret.key=${APPLICATION_SECRET}
    session.token.timeout=1800000
}

play.i18n.langs = ["en"]

play.log.lang = "en"

slick.dbs {
  default {
    profile = "slick.jdbc.PostgresProfile$"
    db {
      driver = "org.postgresql.Driver"
      url = "jdbc:postgresql://"${POSTGRES_URL}"/"${POSTGRES_DB}
      user = ${POSTGRES_USER}
      password = ${POSTGRES_PASSWORD}
    }
  }

  explorer {
    profile = "slick.jdbc.PostgresProfile$"
    db {
      driver = "org.postgresql.Driver"
      url = "jdbc:postgresql://"${EXPLORER_POSTGRES_URL}"/"${EXPLORER_POSTGRES_DB}
      user = ${EXPLORER_POSTGRES_USER}
      password = ${EXPLORER_POSTGRES_PASSWORD}
    }
  }
}

play.evolutions {
  db {
    default {
      enabled = true
      schema = "public"
      autocommit = true
      useLocks = true
      autoApply = true
      autoApplyDowns = true
    }
  }
}

blockchain {
    rpcURL = ${BLOCKCHAIN_RPC}
    restURL = ${BLOCKCHAIN_REST}
    chainId = ${BLOCKCHAIN_CHAIN_ID}
    stakingToken = ${BLOCKCHAIN_STAKING_DENOM}
    transactionMode = "sync"
    lowGasPrice = 0.0
    mediumGasPrice = 0.001
    highGasPrice = 0.01
    ibcDenomList = [{hash: """ibc/25418646C017D377ADF3202FF1E43590D0DAE3346E594E8D78176A139A928F88""", name: "uatom"},
                    {hash: """ibc/9031181CF75229967144341D352B8570EE5E9FDACF5461D5BD319F8FCAC9EEA9""", name: "uxprt"},
                    {hash: """ibc/9117A26BA81E29FA4F78F57DC2BD90CD3D26848101BA880445F119B22A1E254E""", name: "utest"}]
}

scheduler {
    initialDelay = 10000 #milliseconds
    fixedDelay = 6000 #milliseconds
}

# env config
webApp {
    url = ${SITE_URL}
    cacheDuration = 5500
    collectionsPerPage = 6
    nftsPerPage = 6
    defaultPublicFolder = ${DEFAULT_PUBLIC_FOLDER}
}

amazonS3 {
    bucketName = ${AMAZON_S3_BUCKET_NAME}
    region = ${AMAZON_S3_REGION}
    accessKeyID = ${AMAZON_S3_ACCESS_KEY_ID}
    secretKey = ${AMAZON_S3_SECRET_KEY}
    maxMultiPartUploadTime = 7 # number of days
    s3BucketURL = ${AMAZON_S3_BUCKET_URL}
}

ipfs {
    jwtToken = ${IPFS_JWT}
    uploadEndPoint = ${IPFS_UPLOAD_END_POINT}
    downloadEndPoint = ${IPFS_DOWNLOAD_END_POINT}
}

upload {
  rootFilePath = ${ROOT_FILE_PATH}
  collectionPath = ${COLLECTION_PATH}
  account {
    profilePicturePath = "/assetMantle/account/profilePicture/"
  }
}
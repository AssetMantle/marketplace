package constants

import exceptions.BaseException
import play.api.Logger
import play.api.routing.JavaScriptReverseRoute

object Response {

  private val PREFIX = "RESPONSE."
  private val FAILURE_PREFIX = "FAILURE."
  private val WARNING_PREFIX = "WARNING."
  private val SUCCESS_PREFIX = "SUCCESS."
  private val INFO_PREFIX = "INFO."
  private val LOG_PREFIX = "LOG."

  val LOGGED_OUT = new Success("LOGGED_OUT")

  val ACCOUNT_INSERT_FAILED = Failure("ACCOUNT_INSERT_FAILED")
  val ACCOUNT_UPSERT_FAILED = Failure("ACCOUNT_UPSERT_FAILED")
  val ACCOUNT_NOT_FOUND = Failure("ACCOUNT_NOT_FOUND")

  val INVALID_USERNAME_OR_PASSWORD = Failure("INVALID_USERNAME_OR_PASSWORD")
  val INVALID_PASSWORD = Failure("INVALID_PASSWORD")
  val INCORRECT_KEY_PASSWORD = Failure("INCORRECT_KEY_PASSWORD")
  val INVALID_CURRENT_PASSWORD = Failure("INVALID_CURRENT_PASSWORD")
  val PASSWORDS_DO_NOT_MATCH = Failure("PASSWORDS_DO_NOT_MATCH")
  val TERMS_AND_CONDITION_NOT_ACCEPTED = Failure("TERMS_AND_CONDITION_NOT_ACCEPTED")
  val MOU_NOT_ACCEPTED = Failure("MOU_NOT_ACCEPTED")
  val USERNAME_UNAVAILABLE = Failure("USERNAME_UNAVAILABLE")
  val PASSWORD_VALIDATION_FAILED = Failure("PASSWORD_VALIDATION_FAILED")
  val OLD_AND_NEW_SAME_PASSWORD = Failure("OLD_AND_NEW_SAME_PASSWORD")
  val INVALID_SEEDS_OR_ADDRESS = Failure("INVALID_SEEDS_OR_ADDRESS")
  val INVALID_SEEDS_OR_ADDRESS_OR_PASSWORD = Failure("INVALID_SEEDS_OR_ADDRESS_OR_PASSWORD")
  val MNEMONICS_LENGTH_NOT_12_OR_24 = Failure("MNEMONICS_LENGTH_NOT_12_OR_24")

  val SIGN_UP_SUCCESSFUL = new Success("SIGN_UP_SUCCESSFUL")

  val JSON_PARSE_EXCEPTION = Failure("JSON_PARSE_EXCEPTION")
  val JSON_MAPPING_EXCEPTION = Failure("JSON_MAPPING_EXCEPTION")
  val CONNECT_EXCEPTION = Failure("CONNECT_EXCEPTION")
  val NUMBER_FORMAT_EXCEPTION = Failure("NUMBER_FORMAT_EXCEPTION")
  val DATE_FORMAT_ERROR = Failure("DATE_FORMAT_ERROR")
  val INVALID_DATA_TYPE = Failure("INVALID_DATA_TYPE")

  val INVALID_BECH32_ADDRESS = Failure("INVALID_BECH32_ADDRESS")
  val KEY_GENERATION_FAILED = Failure("KEY_GENERATION_FAILED")
  val INVALID_ACCOUNT_ADDRESS = Failure("INVALID_ACCOUNT_ADDRESS")
  val INVALID_OPERATOR_ADDRESS = Failure("INVALID_OPERATOR_ADDRESS")
  val INVALID_HRP_OR_BYTES = Failure("INVALID_HRP_OR_BYTES")
  val INVALID_MNEMONICS = Failure("INVALID_MNEMONICS")
  val INVALID_MNEMONICS_OR_USERNAME = Failure("INVALID_MNEMONICS_OR_USERNAME")
  val INVALID_ACTIVE_KEY = Failure("INVALID_ACTIVE_KEY")
  val ACTIVATING_UNMANAGED_KEY = Failure("ACTIVATING_UNMANAGED_KEY")
  val KEY_NOT_PROVISIONED = Failure("KEY_NOT_PROVISIONED")

  val IPFS_UPLOAD_FAILED = Failure("IPFS_UPLOAD_FAILED")
  val ERROR_DOWNLOADING_IPFS_FILE = Failure("ERROR_DOWNLOADING_IPFS_FILE")
  val AMAZON_S3_UPLOAD_FAILURE = Failure("AMAZON_S3_UPLOAD_FAILURE")
  val AMAZON_S3_PROCESS_FAILURE = Failure("AMAZON_S3_PROCESS_FAILURE")
  val AMAZON_S3_CLIENT_CONNECTION_FAILURE = Failure("AMAZON_S3_CLIENT_CONNECTION_FAILURE")
  val AMAZON_S3_NON_VERSIONED_BUCKET = Failure("AMAZON_S3_NON_VERSIONED_BUCKET")
  val COLLECTION_UPLOAD_ERROR = Failure("COLLECTION_UPLOAD_ERROR")

  val GENERIC_JSON_EXCEPTION = Failure("GENERIC_JSON_EXCEPTION")
  val NO_SUCH_ELEMENT_EXCEPTION = Failure("NO_SUCH_ELEMENT_EXCEPTION")
  val NULL_POINTER_EXCEPTION = Failure("NULL_POINTER_EXCEPTION")
  val INVALID_FILE_PATH_EXCEPTION = Failure("INVALID_FILE_PATH_EXCEPTION")
  val FILE_SECURITY_EXCEPTION = Failure("FILE_SECURITY_EXCEPTION")
  val GENERIC_EXCEPTION = Failure("GENERIC_EXCEPTION")
  val I_O_EXCEPTION = Failure("I_O_EXCEPTION")
  val FILE_NOT_FOUND_EXCEPTION = Failure("FILE_NOT_FOUND_EXCEPTION")
  val FILE_ILLEGAL_ARGUMENT_EXCEPTION = Failure("FILE_ILLEGAL_ARGUMENT_EXCEPTION")
  val CLASS_CAST_EXCEPTION = Failure("CLASS_CAST_EXCEPTION")
  val FILE_UNSUPPORTED_OPERATION_EXCEPTION = Failure("FILE_UNSUPPORTED_OPERATION_EXCEPTION")
  val NO_SUCH_FILE_EXCEPTION = Failure("NO_SUCH_FILE_EXCEPTION")
  val FILE_UPLOAD_ERROR = Failure("FILE_UPLOAD_ERROR")
  val FILE_TYPE_NOT_FOUND = Failure("FILE_TYPE_NOT_FOUND")

  val USERNAME_NOT_FOUND = Failure("USERNAME_NOT_FOUND")
  val ADDRESS_NOT_FOUND = Failure("ADDRESS_NOT_FOUND")
  val TOKEN_NOT_FOUND = Failure("TOKEN_NOT_FOUND")
  val INVALID_SESSION = Failure("INVALID_SESSION")
  val UNAUTHORIZED = Failure("UNAUTHORIZED")
  val INVALID_PAGE_NUMBER = Failure("INVALID_PAGE_NUMBER")
  val INVALID_SEEDS = Failure("INVALID_SEEDS")
  val SEEDS_NOT_FOUND = Failure("SEEDS_NOT_FOUND")
  val INVALID_KEY_NAME = Failure("INVALID_KEY_NAME")
  val INVALID_PASSWORD_OR_SEEDS = Failure("INVALID_PASSWORD_OR_SEEDS")
  val HD_PATH_NOT_FOUND = Failure("HD_PATH_NOT_FOUND")
  val INVALID_WALLET_ADDRESS = Failure("INVALID_WALLET_ADDRESS")
  val START_TIME_GREATER_THAN_EQUAL_TO_END_TIME = Failure("START_TIME_GREATER_THAN_EQUAL_TO_END_TIME")
  val START_TIME_LESS_THAN_CURRENT_TIME = Failure("START_TIME_LESS_THAN_CURRENT_TIME")
  val SECONDARY_MARKET_END_EPOCH_EXCEEDS_LIMIT = Failure("SECONDARY_MARKET_END_EPOCH_EXCEEDS_LIMIT")
  val SECONDARY_MARKET_NFT_AMOUNT_EXCEEDS_LIMIT = Failure("SECONDARY_MARKET_NFT_AMOUNT_EXCEEDS_LIMIT")
  val SECONDARY_MARKET_CANNOT_USE_ALL_THREE_OPTIONS = Failure("SECONDARY_MARKET_CANNOT_USE_ALL_THREE_OPTIONS")
  val CANNOT_DELETE_ACTIVE_KEY = Failure("CANNOT_DELETE_ACTIVE_KEY")
  val MICRO_NUMBER_PRECISION_MORE_THAN_REQUIRED = Failure("MICRO_NUMBER_PRECISION_MORE_THAN_REQUIRED")
  val FROM_AND_TO_ADDRESS_SAME = Failure("FROM_AND_TO_ADDRESS_SAME")
  val INVALID_FROM_ADDRESS = Failure("INVALID_FROM_ADDRESS")
  val INVALID_TO_ADDRESS = Failure("INVALID_TO_ADDRESS")
  val INSUFFICIENT_BALANCE = Failure("INSUFFICIENT_BALANCE")
  val INSUFFICIENT_NFT_BALANCE = Failure("INSUFFICIENT_NFT_BALANCE")
  val TO_ACCOUNT_ID_DOES_NOT_EXISTS = Failure("TO_ACCOUNT_ID_DOES_NOT_EXISTS")
  val MAXIMUM_COLLECTION_PROPERTIES_EXCEEDED = Failure("MAXIMUM_COLLECTION_PROPERTIES_EXCEEDED")
  val CANNOT_SEND_TO_YOURSELF = Failure("CANNOT_SEND_TO_YOURSELF")
  val COLLECTION_PROPERTIES_CONTAINS_DEFAULT_PROPERTIES = Failure("COLLECTION_PROPERTIES_CONTAINS_DEFAULT_PROPERTIES")
  val COLLECTION_PROPERTIES_CONTAINS_DUPLICATE_PROPERTIES = Failure("COLLECTION_PROPERTIES_CONTAINS_DUPLICATE_PROPERTIES")
  val COLLECTION_PROPERTIES_CONTAINS_RESTRICTED_PROPERTIES = Failure("COLLECTION_PROPERTIES_CONTAINS_RESTRICTED_PROPERTIES")
  val COLLECTION_PROPERTY_NOT_DEFINED = Failure("COLLECTION_PROPERTY_NOT_DEFINED")
  val INVALID_NFT_TAGS_LENGTH = Failure("INVALID_NFT_TAGS_LENGTH")
  val MAXIMUM_NFT_TAGS_EXCEEDED = Failure("MAXIMUM_NFT_TAGS_EXCEEDED")
  val REPEATED_NFT_TAGS = Failure("REPEATED_NFT_TAGS")
  val INVALID_ORDER = Failure("INVALID_ORDER")
  val ORDER_NOT_CREATED_ON_BLOCKCHAIN = Failure("ORDER_NOT_CREATED_ON_BLOCKCHAIN")
  val KEY_PROVISION_STATE_UNKNOWN = Failure("KEY_PROVISION_STATE_UNKNOWN")

  val UNKNOWN_TRANSACTION_MESSAGE = Failure("UNKNOWN_TRANSACTION_MESSAGE")
  val ARITHMETIC_OPERATION_ON_DIFFERENT_COIN = Failure("ARITHMETIC_OPERATION_ON_DIFFERENT_COIN")
  val COIN_AMOUNT_NEGATIVE = Failure("COIN_AMOUNT_NEGATIVE")
  val INVALID_SIGNATURE = Failure("INVALID_SIGNATURE")
  val NO_SUCH_PROPOSAL_CONTENT_TYPE = Failure("NO_SUCH_PROPOSAL_CONTENT_TYPE")
  val INVALID_BASE64_ENCODING = Failure("INVALID_BASE64_ENCODING")
  val NO_SUCH_PUBLIC_KEY_TYPE = Failure("NO_SUCH_PUBLIC_KEY_TYPE")
  val UNKNOWN_GRANT_AUTHORIZATION_RESPONSE_STRUCTURE = Failure("UNKNOWN_GRANT_AUTHORIZATION_RESPONSE_STRUCTURE")
  val TRANSACTION_PROCESSING_FAILED = Failure("TRANSACTION_PROCESSING_FAILED")
  val TRANSACTION_ALREADY_IN_MEMPOOL = Failure("TRANSACTION_ALREADY_IN_MEMPOOL")
  val INVALID_NUMBER_FORMAT = Failure("INVALID_NUMBER_FORMAT")
  val ACCOUNT_TYPE_NOT_FOUND = Failure("ACCOUNT_TYPE_NOT_FOUND")
  val BALANCE_FETCH_FAILED = Failure("BALANCE_FETCH_FAILED")
  val NO_COLLECTION_TO_CREATE_WHITELIST = Failure("NO_COLLECTION_TO_CREATE_WHITELIST")
  val CANNOT_CREATE_MORE_ALLOWED_WHITELISTS = Failure("CANNOT_CREATE_MORE_ALLOWED_WHITELISTS")
  val WHITELIST_MAX_MEMBERS_REACHED = Failure("WHITELIST_MAX_MEMBERS_REACHED")
  val NOT_WHITELIST_CREATOR = Failure("NOT_WHITELIST_CREATOR")
  val NO_SUCH_DOCUMENT_TYPE_EXCEPTION = Failure("NO_SUCH_DOCUMENT_TYPE_EXCEPTION")
  val NOT_COLLECTION_OWNER = Failure("NOT_COLLECTION_OWNER")
  val NOT_NFT_OWNER = Failure("NOT_NFT_OWNER")
  val NOT_ENOUGH_QUANTITY = Failure("NOT_ENOUGH_QUANTITY")
  val NFT_OWNER_NOT_FOUND = Failure("NFT_OWNER_NOT_FOUND")
  val NFT_NOT_MINTED = Failure("NFT_NOT_MINTED")
  val SELLING_MINT_E_COLLECTIONS_NOT_ALLOWED = Failure("SELLING_MINT_E_COLLECTIONS_NOT_ALLOWED")
  val CLASSIFICATION_ALREADY_DEFINED = Failure("CLASSIFICATION_ALREADY_DEFINED")
  val FILE_SIZE_EXCEED_LIMIT = Failure("FILE_SIZE_EXCEED_LIMIT")
  val INVALID_DOCUMENT_TYPE = Failure("INVALID_DOCUMENT_TYPE")
  val INVALID_DEFAULT_VALUE = Failure("INVALID_DEFAULT_VALUE")
  val NFT_PROPERTY_NOT_FOUND = Failure("NFT_PROPERTY_NOT_FOUND")
  val NFT_PROPERTY_NAME_NOT_FOUND = Failure("NFT_PROPERTY_NAME_NOT_FOUND")
  val NFT_PROPERTY_DESCRIPTION_NOT_FOUND = Failure("NFT_PROPERTY_DESCRIPTION_NOT_FOUND")
  val NFT_PROPERTY_TYPE_NOT_FOUND = Failure("NFT_PROPERTY_TYPE_NOT_FOUND")
  val INVALID_NFT_PROPERTY = Failure("INVALID_NFT_PROPERTY")
  val NOT_META_PROPERTY = Failure("NOT_META_PROPERTY")
  val NOT_MESA_PROPERTY = Failure("NOT_MESA_PROPERTY")
  val NOT_GENESIS_CREATOR = Failure("NOT_GENESIS_CREATOR")
  val NOT_VERIFIED_CREATOR = Failure("NOT_VERIFIED_CREATOR")
  val COLLECTION_NOT_FOUND = Failure("COLLECTION_NOT_FOUND")
  val COLLECTION_NOT_PUBLIC = Failure("COLLECTION_NOT_PUBLIC")
  val FRACTIONALIZED_COLLECTION_NOT_ALLOWED = Failure("FRACTIONALIZED_COLLECTION_NOT_ALLOWED")
  val NFT_ALREADY_ON_SALE = Failure("NFT_ALREADY_ON_SALE")
  val CANNOT_CREATE_MORE_THAN_ONE_SALE = Failure("CANNOT_CREATE_MORE_THAN_ONE_SALE")
  val SALE_NOT_STARTED_OR_EXPIRED = Failure("SALE_NOT_STARTED_OR_EXPIRED")
  val COLLECTION_ID_OR_WHITELIST_ID_DOES_NOT_EXIST = Failure("COLLECTION_ID_OR_WHITELIST_ID_DOES_NOT_EXIST")
  val NOT_ENOUGH_NFTS_IN_COLLECTION = Failure("NOT_ENOUGH_NFTS_IN_COLLECTION")
  val NFT_NOT_FOUND = Failure("NFT_NOT_FOUND")
  val CANNOT_SELL_MORE_THAN_ALLOWED_LIMIT = Failure("CANNOT_SELL_MORE_THAN_ALLOWED_LIMIT")
  val DIRECTORY_CREATION_FAILED = Failure("DIRECTORY_CREATION_FAILED")
  val CANNOT_SELL_TO_YOURSELF = Failure("CANNOT_SELL_TO_YOURSELF")
  val NOT_MEMBER_OF_WHITELIST = Failure("NOT_MEMBER_OF_WHITELIST")
  val SALE_NOT_STARTED = Failure("SALE_NOT_STARTED")
  val EARLY_ACCESS_NOT_STARTED = Failure("EARLY_ACCESS_NOT_STARTED")
  val SALE_EXPIRED = Failure("SALE_EXPIRED")
  val EARLY_ACCESS_ENDED = Failure("EARLY_ACCESS_ENDED")
  val NO_SALE_ON_NFT = Failure("NO_SALE_ON_NFT")
  val NOT_NOTIFICATION_OWNER = Failure("NOT_NOTIFICATION_OWNER")
  val NFT_NOT_ON_SALE = Failure("NFT_NOT_ON_SALE")
  val NFT_WHITELIST_SALE_NOT_FOUND = Failure("NFT_WHITELIST_SALE_NOT_FOUND")
  val NFT_PUBLIC_LISTING_SALE_NOT_FOUND = Failure("NFT_PUBLIC_LISTING_SALE_NOT_FOUND")
  val NFT_NOT_ON_PUBLIC_LISTING = Failure("NFT_NOT_ON_PUBLIC_LISTING")
  val HANDLE_MULTIPLE_NFT_QUANTITY_CASE = Failure("HANDLE_MULTIPLE_NFT_QUANTITY_CASE")
  val NFT_ALREADY_MINTED = Failure("NFT_ALREADY_MINTED")
  val NFT_TOTAL_SUPPLY_AND_OWNED_DIFFERENT = Failure("NFT_TOTAL_SUPPLY_AND_OWNED_DIFFERENT")
  val MAXIMUM_NFT_MINT_PER_ACCOUNT_REACHED = Failure("MAXIMUM_NFT_MINT_PER_ACCOUNT_REACHED")
  val NFT_ALREADY_SOLD = Failure("NFT_ALREADY_SOLD")
  val SIGNING_FAILED = Failure("SIGNING_FAILED")
  val TRANSACTION_NOT_FOUND = Failure("TRANSACTION_NOT_FOUND")
  val TRANSACTION_BROADCASTING_FAILED_AND_TIMED_OUT = Failure("TRANSACTION_BROADCASTING_FAILED_AND_TIMED_OUT")
  val ORDER_ID_NOT_FOUND = Failure("ORDER_ID_NOT_FOUND")
  val INVALID_IDENTITY_ISSUE_MESSAGE = Failure("INVALID_IDENTITY_ISSUE_MESSAGE")
  val ADDRESS_ALREADY_PROVISIONED = Failure("ADDRESS_ALREADY_PROVISIONED")
  val IDENTITY_DOES_NOT_EXIST_TO_MINT = Failure("IDENTITY_DOES_NOT_EXIST_TO_MINT")
  val TAKE_ORDER_MORE_QUANTITY = Failure("TAKE_ORDER_MORE_QUANTITY")
  val INVALID_QUANTITY_FOR_NFT_SECONDARY_MARKET = Failure("INVALID_QUANTITY_FOR_NFT_SECONDARY_MARKET")
  val TRANSACTION_HEIGHT_NOT_FOUND = Failure("TRANSACTION_HEIGHT_NOT_FOUND")

  case class Failure(private val response: String) {
    def message: String = PREFIX + FAILURE_PREFIX + response

    def logMessage: String = LOG_PREFIX + response

    def throwBaseException(exception: Exception = null)(implicit module: String, logger: Logger) = throw new BaseException(this, exception)
  }

  class Warning(private val response: String, private val actionController: JavaScriptReverseRoute = null) {
    val message: String = PREFIX + WARNING_PREFIX + response
  }

  class Success(private val response: String) {
    val message: String = Response.PREFIX + Response.SUCCESS_PREFIX + response
  }

  class Info(private val response: String) {
    val message: String = PREFIX + INFO_PREFIX + response
  }

}
